name: example

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Temporary SSH Keys
        run: |
          mkdir $HOME/.ssh
          chmod 700 $HOME/.ssh
          ssh-keygen -t ed25519 -f $HOME/.ssh/id_ed25519 -q -N ''
          echo "ssh_public_key=$(cat $HOME/.ssh/id_ed25519.pub)" >> $GITHUB_ENV
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-2"
      - name: Setup arm64 instance
        id: ec2-arm64
        uses: truemark/aws-ec2-run-instance-action@9a769b48e72be5066c1cbbdefd48cf1e0c2b0c0a
        with:
          security-group-id: "sg-0baf5bcfe9f21efa5"
          subnet-id: "subnet-09a35a2abd797dbf9"
          image-id: "default-arm64"
          instance-type: "c7g.large"
          instance-profile: "TruemarkEC2RoleforSSM"
          region: "us-east-2"
          user-data: |
            #!/usr/bin/env bash
            yum install docker -y
            usermod -a -G docker ec2-user
            systemctl enable docker.service
            systemctl start docker.service
            mkdir -p /home/ec2-user/.ssh
            touch /home/ec2-user/.ssh/authorized_keys
            chmod 700 /home/ec2-user/.ssh
            chmod 600 /home/ec2-user/.ssh/authorized_keys
            echo "${{ env.ssh_public_key }}" >> /home/ec2-user/.ssh/authorized_keys
      - name: Setup amd64 instance
        id: ec2-amd64
        uses: truemark/aws-ec2-run-instance-action@9a769b48e72be5066c1cbbdefd48cf1e0c2b0c0a
        with:
          security-group-id: "sg-0baf5bcfe9f21efa5"
          subnet-id: "subnet-09a35a2abd797dbf9"
          image-id: "default-amd64"
          instance-type: "c6i.large"
          instance-profile: "TruemarkEC2RoleforSSM"
          region: "us-east-2"
          user-data: |
            #!/usr/bin/env bash
            yum install docker -y
            usermod -a -G docker ec2-user
            systemctl enable docker.service
            systemctl start docker.service
            mkdir -p /home/ec2-user/.ssh
            touch /home/ec2-user/.ssh/authorized_keys
            chmod 700 /home/ec2-user/.ssh
            chmod 600 /home/ec2-user/.ssh/authorized_keys
            echo "${{ env.ssh_public_key }}" >> /home/ec2-user/.ssh/authorized_keys
      - name: Wait for instances
        id: ec2-wait
        uses: truemark/aws-ec2-instance-wait-action@v1
        with:
          instance-ids: ${{ steps.ec2-arm64.outputs.instance-id }},${{ steps.ec2-amd64.outputs.instance-id }}
          region: "us-east-2"
          timeout-ms: "600000"
      - name: Describe arm64 Instance
        id: ec2-describe-arm64
        uses: truemark/aws-ec2-describe-instance-action@7ec04192d08652dc9d2f6f6480e266001d30706a
        with:
          instance-id: ${{ steps.ec2-arm64.outputs.instance-id }}
          region: "us-east-2"
      - name: Describe amd64 Instance
        id: ec2-describe-amd64
        uses: truemark/aws-ec2-describe-instance-action@7ec04192d08652dc9d2f6f6480e266001d30706a
        with:
          instance-id: ${{ steps.ec2-amd64.outputs.instance-id }}
          region: "us-east-2"
      - name: Setup SSH Agent & Known Hosts
        id: ssh-agent
        run: |
          ssh-agent -a /tmp/ssh-auth.sock
          export SSH_AUTH_SOCK="/tmp/ssh-auth.sock"
          ssh-add $HOME/.ssh/id_ed25519
          ssh-keyscan -p 22 ${{ steps.ec2-describe-arm64.outputs.public-dns-name }} ${{ steps.ec2-describe-amd64.outputs.public-dns-name }} > $HOME/.ssh/known_hosts
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Validate ssh to amd64
        run: ssh ec2-user@${{ steps.ec2-describe-arm64.outputs.public-dns-name }} "cat /etc/amazon-linux-release"
      - name: Validate ssh to arm64
        run: ssh ec2-user@${{ steps.ec2-describe-amd64.outputs.public-dns-name }} "cat /etc/amazon-linux-release"
      - name: Set Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          append: |
            - endpoint: ssh://ec2-user@${{ steps.ec2-describe-arm64.outputs.public-dns-name }}
              platform: linux/arm64
            - endpoint: ssh://ec2-user@${{ steps.ec2-describe-amd64.outputs.public-dns-name }}
              platform: linux/amd64
      - name: Build images
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            -f amazonlinux.Dockerfile \
            -t truemark/aws-cdk:beta-amazonlinux \
            -t truemark/aws-cdk:beta \
            .
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            -f alpine.Dockerfile \
            -t truemark/aws-cdk:beta-alpine \
            .
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            -f ubuntu.Dockerfile \
            -t truemark/aws-cdk:beta-ubuntu \
            .
      - name: Copy to ECR
        run: |
          sudo apt-get update
          sudo apt-get install skopeo -y
          export ECR_PASSWORD=$(aws ecr-public get-login-password --region us-east-1)
          skopeo --insecure-policy copy \
            docker://truemark/aws-cdk:beta \
            docker://public.ecr.aws/truemark/aws-cdk:beta \
            --multi-arch all \
            --dest-username AWS --dest-password $ECR_PASSWORD
          skopeo --insecure-policy copy \
            docker://truemark/aws-cdk:beta-amazonlinux \
            docker://public.ecr.aws/truemark/aws-cdk:beta-amazonlinux \
            --multi-arch all \
            --dest-username AWS --dest-password $ECR_PASSWORD
          skopeo --insecure-policy copy \
            docker://truemark/aws-cdk:beta-alpine \
            docker://public.ecr.aws/truemark/aws-cdk:beta-alpine \
            --multi-arch all \
            --dest-username AWS --dest-password $ECR_PASSWORD \
          skopeo --insecure-policy copy \
            docker://truemark/aws-cdk:beta-ubuntu \
            docker://public.ecr.aws/truemark/aws-cdk:beta-ubuntu \
            --multi-arch all \
            --dest-username AWS --dest-password $ECR_PASSWORD
      - name: Terminate instances
        id: ec2-terminate
        uses: truemark/aws-ec2-instance-state-action@v1
        if: ${{ always() }}
        with:
          instance-ids: ${{ steps.ec2-arm64.outputs.instance-id }},${{ steps.ec2-amd64.outputs.instance-id }}
          action: "terminate"
          region: "us-east-2"
