name: example

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Temporary SSH Keys
        run: |
          ssh-keygen -t ed25519 -f id_ed25519 -q -N ''
          echo "ssh_public_key=$(cat id_ed25519.pub)" >> $GITHUB_ENV
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-2"
      - name: Setup ARM64 EC2
        id: ec2-arm64
        uses: truemark/aws-ec2-run-instance-action@86a8739787bb8e2186d48063efa8e08a98964c6a
        with:
          security-group-id: "sg-0baf5bcfe9f21efa5"
          subnet-id: "subnet-09a35a2abd797dbf9"
          image-id: "default-arm64"
          instance-type: "c7g.large"
          instance-profile: "TruemarkEC2RoleforSSM"
          region: "us-east-2"
          user-data: |
            #!/usr/bin/env bash
            yum install docker -y
            usermod -a -G docker ec2-user
            systemctl enable docker.service
            systemctl start docker.service
            mkdir -p /home/ec2-user/.ssh
            touch /home/ec2-user/.ssh/authorized_keys
            chmod 700 /home/ec2-user/.ssh
            chmod 600 /home/ec2-user/.ssh/authorized_keys
            echo "${{ env.ssh_public_key }}" >> /home/ec2-user/.ssh/authorized_keys
      - name: Wait for EC2
        id: ec2-wait
        uses: truemark/aws-ec2-instance-wait-action@v1
        with:
          instance-ids: ${{ steps.ec2-arm64.outputs.instance-id }}
          region: "us-east-2"
          timeout-ms: "600000"
      - name: Describe EC2
        id: ec2-describe-arm64
        uses: truemark/aws-ec2-describe-instance-action@7ec04192d08652dc9d2f6f6480e266001d30706a
        with:
          instance-id: ${{ steps.ec2-arm64.outputs.instance-id }}
          region: "us-east-2"
      - name: Echo EC2
        run: echo ${{ steps.ec2-describe-arm64.outputs.public-dns-name }}
#      - name: Terminate EC2
#        id: ec2-terminate
#        uses: truemark/aws-ec2-instance-state-action@v1
#        if: ${{ always() }}
#        with:
#          instance-ids: ${{ steps.ec2-arm64.outputs.instance-id }}
#          action: "terminate"
#          region: "us-east-2"
#      - name: Get the output time
#        run: echo "The time was ${{ steps.hello.outputs.time }}"
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_HUB_USERNAME }}
#          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v2
#        with:
#          platforms: all
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Build
#        run: |
#          docker buildx build \
#            --push \
#            --platform linux/arm64,linux/amd64 \
#            -f amazonlinux.Dockerfile \
#            -t truemark/aws-cdk:beta-amazonlinux-${{github.run_number}} \
#            -t truemark/aws-cdk:beta-amazonlinux \
#            -t truemark/aws-cdk:beta \
#            .
#          docker buildx build \
#            --push \
#            --platform linux/arm64,linux/amd64 \
#            -f alpine.Dockerfile \
#            -t truemark/aws-cdk:beta-alpine-${{github.run_number}} \
#            -t truemark/aws-cdk:beta-alpine \
#            .
#          docker buildx build \
#            --push \
#            --platform linux/arm64,linux/amd64 \
#            -f ubuntu.Dockerfile \
#            -t truemark/aws-cdk:beta-ubuntu-${{github.run_number}} \
#            -t truemark/aws-cdk:beta-ubuntu \
#            .
